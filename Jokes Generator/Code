import React, { useState, useCallback } from "react";
import debounce from "lodash.debounce";
import Laughter from "./Laughter_Emote.jpg";

export default function App() {
  const [joke, setJoke] = useState("");
  const [punchline, setPunchline] = useState("");
  const [loading, setLoading] = useState(false);
  const [jokeType, setJokeType] = useState("");
  const [count, setCount] = useState(0);
  const [generalJokes, setGeneralJokes] = useState(0);
  const [programmingJokes, setProgrammingJokes] = useState(0);
  const [jokesHistory, setJokesHistory] = useState([]);
  const [selectedJoke, setSelectedJoke] = useState(null);

  const generateJoke = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        "https://official-joke-api.appspot.com/random_joke"
      );
      if (!response.ok) {
        throw new Error("Error occurred while fetching the Joke!");
      }
      const data = await response.json();
      const newJoke = data.setup;
      const newPunchline = data.punchline;
      const type = data.type;

      setJoke(newJoke);
      setPunchline(newPunchline);
      setJokeType(type);
      setCount((prevCount) => prevCount + 1);

      if (type === "general") {
        setGeneralJokes((prevCount) => prevCount + 1);
      } else if (type === "programming") {
        setProgrammingJokes((prevCount) => prevCount + 1);
      }

      setJokesHistory((prevHistory) => [
        ...prevHistory,
        { id: count + 1, joke: newJoke, punchline: newPunchline, type: type },
      ]);
    } catch (error) {
      console.error("Error occurred! Please try again later!");
      setJoke("Error occurred while loading the Joke!");
      setPunchline("");
    } finally {
      setLoading(false);
    }
  };

  const debouncedGenerateJoke = useCallback(debounce(generateJoke, 300), [
    generateJoke,
  ]);

  const handleJokeSelection = (jokeId) => {
    const selected = jokesHistory.find((joke) => joke.id === jokeId);
    setSelectedJoke(selected);
  };

  const styles = {
    padding: "15px",
    borderRadius: "35px",
    background: "linear-gradient(to right, Grey, DarkMagenta)",
  };

  return (
    <>
      <div style={{ backgroundImage: `url(${Laughter})`, backgroundRepeat: "no-repeat", backgroundSize: "Cover" }}>
        <div style={{ textAlign: "center" }}>
          <h1
            style={{
              fontSize: "50px",
              fontWeight: "bolder",
              fontFamily: "cursive",
            }}
          >
            WELCOME TO THE LAUGHTER FACTORY!
          </h1>
        </div>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            height: "100vh",
            width: "100vw",
          }}
        >
          <strong style={{ width: "500px", height: "100px", marginBottom: "150px" }}>
            <p>
              Number of Jokes till now: {count}
              <div>General Jokes: {generalJokes}</div>
              <div>Programming Jokes: {programmingJokes}</div>
            </p>
            <p>
              Type of Joke:{" "}
              <span style={{ textTransform: "capitalize" }}>{jokeType}</span>
            </p>
            <p>
              <strong>Joke:</strong> {loading ? "Loading..." : joke}
            </p>
            <p>
              <strong>Punchline:</strong> {loading ? "Loading..." : punchline}
            </p>
          </strong>

          <p>
            <button
              id="topper"
              style={styles}
              onClick={() => {
                if (!loading) debouncedGenerateJoke();
              }}
              disabled={loading}
            >
              <strong>Click Here!</strong>
            </button>
          </p>

          <div style={{ marginTop: "20px", height: "60px" }}>
            <select
              onChange={(e) => handleJokeSelection(Number(e.target.value))}
              style={{ width: "200px" }}
            >
              <option value="">Select a Joke Number</option>
              {jokesHistory.map((joke) => (
                <option key={joke.id} value={joke.id}>
                  Joke #{joke.id}
                </option>
              ))}
            </select>
          </div>

          <div
            style={{
              marginTop: "20px",
              height: "60px",
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            {selectedJoke && (
              <>
                <p>
                  <strong>Previous Joke #{selectedJoke.id}:</strong>
                </p>
                <p>{selectedJoke.joke}</p>
                <p>
                  <strong>Punchline:</strong> {selectedJoke.punchline}{" "}
                </p>
                <p>
                  Type:{" "}
                  <em style={{ textTransform: "capitalize" }}>
                    {selectedJoke.type}
                  </em>
                </p>
              </>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
